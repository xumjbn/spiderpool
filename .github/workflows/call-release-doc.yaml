name: Call Release Doc

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      submit:
        required: true
        type: string
    outputs:
      artifact:
        description: "name of artifact"
        value: website_package_artifact
  # --- call by manual
  workflow_dispatch:
    inputs:
      ref:
        description: 'branch, tag, sha'
        required: true
        default: main
      docs_tag:
        description: "defines the generated documentation version"
        required: false
        type: string
      set_latest:
        description: "set the version of the document to the latest."
        type: choice
        required: false
        default: true
        options:
          - "true"
          - "false"

permissions: write-all

env:
  MERGE_BRANCH: github_pages
  SRC_DIRECTORY: 'docs'
  DEST_DIRECTORY: 'docs'
  PR_LABEL: pr/release/robot_update_githubpage
  PR_REVIWER: weizhoublue

jobs:
  get_ref:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ env.REF }}
      submit: ${{ env.SUBMIT }}
      docs_tag: ${{ env.DOCS_TAG }}
      set_latest: ${{ env.SET_LATEST }}
    steps:
      - name: Get Ref
        id: get_ref
        run: |
          pwd
          ls
          if ${{ github.event_name == 'workflow_dispatch' }}; then
              echo "call by workflow_dispatch"
              echo "REF=${{ github.event.inputs.ref }}" >> $GITHUB_ENV
              echo "SUBMIT=true" >> $GITHUB_ENV
              if ${{ github.event.inputs.docs_tag != '' }} ; then
                  echo "DOCS_TAG=${{ github.event.inputs.docs_tag }}" >> $GITHUB_ENV
              else
                  echo "DOCS_TAG=${{ github.event.inputs.ref }}" >> $GITHUB_ENV
              fi
              echo "SET_LATEST=${{ github.event.inputs.set_latest }}" >> $GITHUB_ENV
          elif ${{ inputs.ref != '' }}; then 
              echo "call by workflow_call"
              echo "REF=${{ inputs.ref }}" >> $GITHUB_ENV
              echo "SUBMIT=${{ inputs.submit }}" >> $GITHUB_ENV
              echo "DOCS_TAG=${{ inputs.ref }}" >> $GITHUB_ENV
          else
              echo "unexpected event: ${{ github.event_name }}"
              exit 1
          fi

  build_doc:
    runs-on: ubuntu-latest
    needs: get_ref
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.MERGE_BRANCH }}
    
      - name: Extract Version
        id: extract
        run: |
          pattern="([0-9]+\.[0-9]+)\.[0-9]+"
          VERSION=""
          if [[ ${{ inputs.ref }} =~ $pattern ]]; then
            VERSION="${BASH_REMATCH[1]}.0"
          else
            echo "error, invalid version " && exit 1
          fi
          if [ -e "docs/$VERSION" ]; then
              echo "SET_LATEST=false" >> $GITHUB_ENV
          else
              echo "SET_LATEST=true" >> $GITHUB_ENV
          fi
          echo "DOCS_TAG=$VERSION" >> $GITHUB_ENV
            

      - name: build doc
        run: |
          pip install mkdocs==1.5.2 mike==1.1.2 mkdocs-material==8.5.11
          git config user.email "robot@example.com"
          git config user.name "robot"
          cp ./docs/mkdocs.yml ./
          if ${{ needs.get_ref.outputs.set_latest == 'true' }} ;then
              mike deploy --rebase --prefix ${{ env.DEST_DIRECTORY }} -b ${{ env.MERGE_BRANCH }} --update-aliases ${{ needs.get_ref.outputs.docs_tag }} latest
              mike set-default --prefix ${{ env.DEST_DIRECTORY }} -b ${{ env.MERGE_BRANCH }} latest
          else
              mike deploy --rebase --prefix ${{ env.DEST_DIRECTORY }} -b ${{ env.MERGE_BRANCH }} ${{ needs.get_ref.outputs.docs_tag }}
              echo "the version of the document does not need to be set to the latest."
          fi
          rm -rf ./site
          rm -rf ./mkdocs.yml
          git checkout -f  ${{ env.MERGE_BRANCH }}

      # Allow auto-merge on general
      - name: Create Pull Request
        id: create_pr
        if: ${{ needs.get_ref.outputs.submit == 'true' }}
        uses: peter-evans/create-pull-request@v5.0.2
        with:
          title: "robot update website from ${{ needs.prepare_doc.outputs.ref }} to branch ${{ env.MERGE_BRANCH }} "
          commit-message: "robot update website from ${{ needs.prepare_doc.outputs.ref }} to branch ${{ env.MERGE_BRANCH }} "
          branch-suffix: timestamp
          branch: robot/update_doc
          delete-branch: true
          base: ${{ env.MERGE_BRANCH }}
          signoff: true
          token: ${{ secrets.WELAN_PAT }}
          labels: ${{ env.PR_LABEL }}
          reviewers: ${{ env.PR_REVIWER }}
